#include "smart_home_cli.hpp"


namespace smart_home {

SmartHomeCLI::SmartHomeCLI(SmartHome& home, smart_home::CliView& view) 
: home_(home), view_(view) {}

void SmartHomeCLI::run() {
    bool running = true;
    while (running) {
        view_.show_menu();
        int choice = view_.get_menu_choice();
        
        switch (choice) {
            case 1: listAllSpeakers(); break;
            case 2: showRoomDevices(); break;
            case 3: controlDevice(); break;
            case 4: addNewDevice(); break;
            case 5: checkSystemStatus(); break;
            case 6: toggleDeviceOnlineStatus(); break;
            case 7: checkAndRepairDevices(); break;
            case 8: 
                if (view_.get_confirmation("–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?")) {
                    running = false;
                }
                break;
            default:
                view_.show_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                break;
        }
    }
}

void SmartHomeCLI::listAllSpeakers() {
    std::vector<std::pair<std::string, std::string>> speakers;
    for (const auto& speaker : home_.getSpeakers()) {
        speakers.emplace_back(
            speaker.getName(),
            speaker.getRoom().getTypeAsString()
        );
    }
    view_.show_speakers_list(home_);
    view_.get_input("Press Enter to continue...");
}

void SmartHomeCLI::showRoomDevices() {
    std::vector<std::tuple<std::string, std::string, std::string, std::string>> devices;
    
    for (const auto& speaker : home_.getSpeakers()) {
        for (const auto& device : speaker.getDevices()) {
            std::string status = device->isOnline() ? "–û–Ω–ª–∞–π–Ω" : "–û—Ñ—Ñ–ª–∞–π–Ω";
            std::string type = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ";
            
            if (dynamic_cast<IActiveDevice*>(device.get())) {
                type = "–ê–∫—Ç–∏–≤–Ω–æ–µ " + type;
            }
            if (dynamic_cast<ISensorDevice*>(device.get())) {
                type = "–°–µ–Ω—Å–æ—Ä–Ω–æ–µ " + type;
            }
            
            devices.emplace_back(
                device->getId(),
                device->getName(),
                status,
                type
            );
        }
    }

    view_.show_devices_list(devices);
    view_.get_input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...");
}

void SmartHomeCLI::toggleDeviceOnlineStatus() {
    std::string deviceId = view_.get_input("–í–≤–µ–¥–∏—Ç–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ");
    if (deviceId.empty()) return;

    for (auto& speaker : home_.getSpeakers()) {
        for (const auto& device : speaker.getDevices()) {
            if (device->getId() == deviceId) {
                bool confirm = view_.get_confirmation(
                    "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ " + device->getName() + 
                    " –≤ " + (device->isOnline() ? "–æ—Ñ—Ñ–ª–∞–π–Ω?" : "–æ–Ω–ª–∞–π–Ω?")
                );
                if (confirm) {
                    DeviceController::setDeviceOnlineStatus(device, !device->isOnline());
                    view_.show_message(
                        "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ " + device->getName() + " —Ç–µ–ø–µ—Ä—å " + 
                        (device->isOnline() ? "–æ–Ω–ª–∞–π–Ω" : "–æ—Ñ—Ñ–ª–∞–π–Ω")
                    );
                }
                return;
            }
        }
    }
    view_.show_error("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
}

void SmartHomeCLI::controlDevice() {
    std::string deviceId = view_.get_input("–í–≤–µ–¥–∏—Ç–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ");
    if (deviceId.empty()) return;

    for (auto& speaker : home_.getSpeakers()) {
    for (const auto& device : speaker.getDevices()) {
        if (device->getId() == deviceId) {
            if (auto activeDev = std::dynamic_pointer_cast<IActiveDevice>(device)) {
                bool confirm = view_.get_confirmation(
                    "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å " + device->getName() + " –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ " + 
                    (activeDev->isActive() ? "–í–´–ö–õ?" : "–í–ö–õ?")
                );
                if (confirm) {
                    DeviceController::toggleDevice(activeDev);
                    view_.show_message("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ!");
                }
            } else if (auto sensorDev = std::dynamic_pointer_cast<ISensorDevice>(device)) {
                float value = DeviceController::readSensorValue(sensorDev);
                view_.show_message(
                    "–ü–æ–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞: " + std::to_string(value)
                );
            } else {
                view_.show_error("–≠—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å.");
            }
            return;
        }
    }
    }
    view_.show_error("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
}

void SmartHomeCLI::checkSystemStatus() {
    int totalDevices = 0;
    for (const auto& speaker : home_.getSpeakers()) {
        totalDevices += speaker.getDevices().size();
    }
    
    view_.show_message(
        "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: OK\n"
        "–í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: " + std::to_string(home_.getSpeakers().size()) + "\n" +
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: " + std::to_string(totalDevices)
    );
}
void —Å {
    view_.clear_main();
    
    // 1. –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏
    std::string speakerName = view_.get_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏: ");
    auto* speaker = SmartHomeController::findSpeaker(home_, speakerName);

    if (!speaker) {
        view_.show_error("–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return;
    }

    // 2. –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    view_.show_message("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
                    "1. –£–º–Ω–∞—è –ª–∞–º–ø–∞\n"
                    "2. –¢–µ—Ä–º–æ–º–µ—Ç—Ä\n"
                    "3. –£–º–Ω—ã–π —á–∞–π–Ω–∏–∫\n"
                    "4. –î–∞—Ç—á–∏–∫ –ø—Ä–æ—Ç–µ—á–∫–∏\n"
                    "5. –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä");

    int choice;
    std::string input = view_.get_input("–í–∞—à –≤—ã–±–æ—Ä (1-5): ");
    try {
        choice = std::stoi(input);
    } catch (const std::invalid_argument&) {
        view_.show_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.");
        return;
    } catch (const std::out_of_range&) {
        view_.show_error("–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ.");
        return;
    }

    if (choice < 1 || choice > 5) {
        view_.show_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.");
        return;
    }

    // 3. –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    std::string id = view_.get_input("–í–≤–µ–¥–∏—Ç–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ");
    std::string name = view_.get_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ");

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    switch (choice) {
        case 1:
            speaker->addNewDevice<SmartBulb>(id, name);
            break;
        case 2:
            speaker->addNewDevice<Thermometer>(id, name);
            break;
        case 3:
            speaker->addNewDevice<SmartKettle>(id, name);
            break;
        case 4:
            speaker->addNewDevice<LeakSensor>(id, name);
            break;
        case 5:
            speaker->addNewDevice<AirConditioner>(id, name);
            break;
        default:
            // –≠—Ç–∞ –≤–µ—Ç–∫–∞ —Ç–µ–ø–µ—Ä—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
            view_.show_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞!");
            return;
    }

    view_.show_message("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!");

}
void SmartHomeCLI::checkAndRepairDevices() {
    std::string speakerName = view_.get_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏: ");
    if (speakerName.empty()) return;

    auto* speaker = SmartHomeController::findSpeaker(home_, speakerName);
    if (!speaker) {
        view_.show_error("–ö–æ–ª–æ–Ω–∫–∞ '" + speakerName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return;
    }

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    try {
        view_.show_message("üîç –ü—Ä–æ–≤–µ—Ä—è—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ '" + speakerName + "'...");
        speaker->checkAndRepairDevices();
    } catch (const std::exception& e) {
        view_.show_error("–û—à–∏–±–∫–∞: " + std::string(e.what()));
    }

    view_.get_input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...");
}

} // namespace smart_home